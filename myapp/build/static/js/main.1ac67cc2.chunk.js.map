{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["FormikUserForm","withFormik","mapPropsToValues","name","email","password","terms","validationSchema","Yup","shape","required","handleSubmit","values","setStatus","axios","post","then","response","data","console","log","catch","error","errors","touched","status","useState","users","setUsers","useEffect","className","id","type","checked","map","user","key","App","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAmEMA,EAAiBC,YAAW,CAE9BC,iBAF8B,YAO1B,MAAO,CACHC,KAFR,EAHIA,MAKkB,GACdC,MAHR,EAHUA,OAMc,GAChBC,SAJR,EAHiBA,UAOa,GACtBC,MALR,EAH2BA,QAQH,IAIxBC,iBAAkBC,WAAaC,MAAM,CACjCN,KAAMK,WAAaE,SAAS,iBAC5BN,MAAOI,WAAaE,SAAS,kBAC7BL,SAAUG,WAAaE,SAAS,qBAChCJ,MAAOE,WAAaE,SAAS,kCAIrCC,aAvBkC,SAuBrBC,EAvBqB,GAuBC,IAAbC,EAAY,EAAZA,UAEtBC,IACCC,KAAK,8BAA+BH,GACpCI,MAAK,SAAAC,GACFJ,EAAUI,EAASC,MACnBC,QAAQC,IAAIH,MAEfI,OAAM,SAAAC,GAAK,OAAIH,QAAQC,IAAIE,EAAML,eA/BXhB,EA9DN,SAAC,GAAuC,IAAtCsB,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,QAASZ,EAAoB,EAApBA,OAAQa,EAAY,EAAZA,OAAY,EAE9BC,mBAAS,IAFqB,mBAEjDC,EAFiD,KAE1CC,EAF0C,KAUxD,OANAC,qBAAU,WACFJ,GACAG,EAAS,CAACH,MAEf,CAACA,IAGA,yBAAKK,UAAU,WACf,yBAAKA,UAAU,UAAS,wBAAIC,GAAG,QAAO,0BAAMD,UAAU,SAAhB,YAAd,OAAyD,0BAAMA,UAAU,UAAhB,mBAG5E,6CAGL,kBAAC,IAAD,CAAMA,UAAU,YACZ,oCACA,kBAAC,IAAD,CAAOA,UAAU,SAASE,KAAK,OAAO7B,KAAK,SAEnCqB,EAAQrB,MAAQoB,EAAOpB,MACvB,uBAAG2B,UAAU,SAASP,EAAOpB,MAEjC,qCACA,kBAAC,IAAD,CAAO2B,UAAU,SAASE,KAAK,OAAO7B,KAAK,UAC1CqB,EAAQpB,OAASmB,EAAOnB,OACrB,uBAAG0B,UAAU,SAASP,EAAOnB,OAEjC,uBAAG0B,UAAU,SAAb,aACA,kBAAC,IAAD,CAAOA,UAAU,SAASE,KAAK,WAAW7B,KAAK,aAC9CqB,EAAQnB,UAAYkB,EAAOlB,UACxB,uBAAGyB,UAAU,SAASP,EAAOlB,UAEjC,yBAAKyB,UAAU,WACf,2BAAOA,UAAW,kBAAlB,4BAEI,kBAAC,IAAD,CAAOA,UAAU,WACjBE,KAAK,WACL7B,KAAK,QACL8B,QAAUrB,EAAOe,QACjB,0BAAMG,UAAU,eAEpB,4BAAQA,UAAU,SAASE,KAAM,UAAjC,aAICL,EAAMO,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAOD,EAAKJ,IACZ,qCAAWI,EAAKhC,MAChB,sCAAYgC,EAAK/B,OACjB,yCAAe+B,EAAK9B,kBA4CxCc,QAAQC,IAAI,oBAAqBpB,GAGlBA,Q,OC1FAqC,MAVf,WACE,OACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,YAEf,kBAACQ,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.1ac67cc2.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport axios from \"axios\"\nimport {Form, Field, withFormik} from \"formik\";\nimport * as Yup from \"yup\";\n\nconst UserForm = ({errors, touched, values, status}) => {\n//state component\nconst [users, setUsers] = useState([]);\n//effect component\nuseEffect(() => {\n    if (status) {\n        setUsers([status]);\n    }\n}, [status]) //closing UseEffect\n//return\nreturn (\n    <div className=\"formOne\">\n    <div className=\"header\"><h1 id=\"head\"><span className=\"color\">Welcome </span> to <span className=\"school\">Lambda School!\n</span>\n         </h1>\n         <p>Sign up here.</p>\n                </div>\n    \n    <Form className=\"userform\">\n        <p>Name:</p>\n        <Field className=\"inputs\" type=\"text\" name=\"name\"/>\n            {\n                touched.name && errors.name && (\n                <p className=\"error\">{errors.name}</p>\n            )}\n            <p>Email:</p>\n            <Field className=\"inputs\" type=\"text\" name=\"email\"/>\n            {touched.email && errors.email && (\n                <p className=\"error\">{errors.email}</p>\n            )}\n            <p className=\"three\">Password:</p>\n            <Field className=\"inputs\" type=\"password\" name=\"password\"/>\n            {touched.password && errors.password && (\n                <p className=\"error\">{errors.password}</p>\n            )}\n            <div className=\"formTwo\">\n            <label className= \"checkout-valid\">\n                Accept Terms & Conditions\n                <Field className=\"checkbox\"\n                type=\"checkbox\"\n                name=\"users\"\n                checked= {values.users}/>\n                <span className=\"checkmark\"/>\n            </label>\n            <button className=\"button\" type= \"submit\">Sign up</button>\n            </div>\n            </Form>\n\n            {users.map(user => (\n                <ul key = {user.id}>\n                    <li>Name: {user.name}</li>\n                    <li>Email: {user.email}</li>\n                    <li>Password: {user.password}</li>\n                </ul>\n            ))}\n\n    </div>\n   )  //closing return\n}; //closing function\n//export\n\n//function\nconst FormikUserForm = withFormik({\n    //map values to Formik\n    mapPropsToValues({\n        name, email, password, terms\n    }) \n    //return\n    {\n        return {\n            name: name || \"\",\n            email: email || \"\",\n            password: password || \"\",\n            terms: terms || false\n        };\n    },\n    //validation Yup\n    validationSchema: Yup.object().shape({\n        name: Yup.string().required(\"name required\"),\n        email: Yup.string().required(\"email required\"),\n        password: Yup.string().required(\"password required\"),\n        terms: Yup.string().required(\"terms and condition required\")\n\n    }),\n\nhandleSubmit(values, {setStatus}) {\n//axios.post\naxios\n.post(\"https://reqres.in/api/users\", values)\n.then(response => {\n    setStatus(response.data);\n    console.log(response);\n})\n.catch(error => console.log(error.response));\n}\n})(UserForm);\nconsole.log(\"Error, try again!\", FormikUserForm);\n\n//export\nexport default FormikUserForm","import React from 'react';\nimport Form from \"./components/Form\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"overlay\">\n        </div>\n      <Form />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}